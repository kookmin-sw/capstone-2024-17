version: '3.8'
services:
  spring-service:
    env_file:
      - .env
    container_name: spring-container
    image: hyeesw/spring-app
    ports:
      - "8080:8080"
    depends_on:
      mysql-service:
        condition: service_healthy
      redis-service:
        condition: service_healthy
    networks:
      - backend-network

  mysql-service:
    container_name: mysql-container
    image: mysql:latest
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      MYSQL_ROOT_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      MYSQL_ROOT_HOST: '%'
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    ports:
      - "3306:3306"
    networks:
      - backend-network

  redis-service:
    container_name: redis-container
    image: redis:latest
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "6379:6379"
    networks:
      - backend-network

  portainer:
    container_name: portainer
    image: portainer/portainer-ee:latest  # Business Edition
    ports:
      - "18000:8000"
      - "19000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    environment:
      - PORTAINER_ARGS=--ssl --sslcert /certs/portainer.crt --sslkey /certs/portainer.key --tunnel-port=8000 --tunnel-certificate /certs/portainer.crt --tunnel-key /certs/portainer.key
      - PORTAINER_ENCRYPTION_KEY=${PORTAINER_ENCRYPTION_KEY}
    restart: always

volumes:
  portainer_data:

networks:
  backend-network:
